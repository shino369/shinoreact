{"version":3,"file":"static/js/521.6d58362b.chunk.js","mappings":"yTAkCaA,GALEC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAAaG,SAAS,YAChCC,SAAUJ,EAAAA,KAAaG,SAAS,cAGT,WACvB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,MACnB,GAAkCC,EAAAA,EAAAA,KAChC,SAACC,GAAD,OAA0BA,EAAUC,QADtC,EAAQC,KAAR,EAAcC,iBAIdC,EAAAA,EAAAA,YAAU,WACRT,GAASU,EAAAA,EAAAA,IAAe,YACvB,CAACV,IAEJ,IAAMW,EAAiB,yCAAG,4GACxBX,GAASY,EAAAA,EAAAA,KAAW,IACdC,EAAW,IAAIC,EAAAA,GACfR,GAAOS,EAAAA,EAAAA,MAHW,mBAKDC,EAAAA,EAAAA,IAAgBV,EAAMO,GALrB,cAKhBI,EALgB,OAMhBV,EAAOU,EAAOV,KACpBP,GAASkB,EAAAA,EAAAA,KAAiB,IAC1BlB,GAASmB,EAAAA,EAAAA,IAAQZ,IAIXa,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASf,EAAKgB,KAZf,WAaAC,EAAAA,EAAAA,IAAOJ,GAbP,kBAeTK,SAfS,wBAgBdC,EAAW,CACfH,IAAKhB,EAAKgB,IACVI,MAAOpB,EAAKoB,OAAS,GACrBC,YAAarB,EAAKqB,aAAe,GACjCC,SAAUtB,EAAKsB,UAAY,GAC3BC,KAAM,OACNC,UAAWC,EAAAA,GAAAA,MACXC,UAAWD,EAAAA,GAAAA,OAvBO,WAyBdE,EAAAA,EAAAA,KAAOb,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASf,EAAKgB,KAAMG,GAzBrB,uCA4BdA,EAAW,CACfE,YAAarB,EAAKqB,aAAe,GACjCC,SAAUtB,EAAKsB,UAAY,GAC3BI,UAAWD,EAAAA,GAAAA,OA/BO,WAiCdG,EAAAA,EAAAA,KAAUd,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASf,EAAKgB,KAAMG,GAjCxB,QAoCtB1B,GAASY,EAAAA,EAAAA,KAAW,IACpBwB,YAAW,WACTC,QAAQC,IAAI,oBACZpC,EAAW,WACV,KAxCmB,kDA0CtBmC,QAAQC,IAAR,MACAtC,GAASY,EAAAA,EAAAA,KAAW,IA3CE,0DAAH,qDA+CvB,OACE,iBAAK2B,UAAU,mEAAf,WACE,cACEA,UAAU,SACVC,MAAO,CACLC,SAAU,UAHd,0FASA,4BACE,gBAAKF,UAAU,0BAAf,yBACA,8FAGA,gBAAKA,UAAU,gCAAf,UACE,gBACEA,UAAU,cACVC,MAAO,CACLC,SAAU,UAHd,WAME,yDACA,wCACA,8DACA,yCAIJ,gBAAKF,UAAU,mBAAf,+DAIF,oBACEG,QAAS/B,EACT6B,MAAO,CACLG,gBAAiB,mBACjBC,MAAO,SAETL,UAAU,+DANZ,WAQE,gBAAKA,UAAU,oBAAf,UACE,gBACEM,MAAO,GACPC,OAAQ,GACRC,IAAKC,EAAQ,OACbC,IAAI,cAIR,gBAAKV,UAAU,SAAf,qCA4DF,SAAC,KAAD,CAAMW,GAAG,IAAT,mC","sources":["app/pages/login/index.tsx"],"sourcesContent":["// import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { Form, Formik } from \"formik\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { setActiveRoute } from \"store/activeRoute\";\r\nimport { Alert, Card, CardBody, Col, Container, Row } from \"reactstrap\";\r\nimport { InputField } from \"app/components\";\r\nimport * as Yup from \"yup\";\r\nimport { setAuthenticated, setUser } from \"store/auth\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { RootState } from \"store\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport \"./index.scss\";\r\nimport { setLoading } from \"store/loading\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  getDoc,\r\n  setDoc,\r\n  doc,\r\n  query,\r\n  where,\r\n  Timestamp,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"app/hooks/firebase\";\r\n\r\nconst Schema = Yup.object().shape({\r\n  username: Yup.string().required(\"required\"),\r\n  password: Yup.string().required(\"required\"),\r\n});\r\n\r\nexport const LoginPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigate();\r\n  const { user, isAuthenticated } = useSelector(\r\n    (rootState: RootState) => rootState.auth\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveRoute(\"login\"));\r\n  }, [dispatch]);\r\n\r\n  const handleLoginGoogle = async () => {\r\n    dispatch(setLoading(true));\r\n    const provider = new GoogleAuthProvider();\r\n    const auth = getAuth();\r\n    try {\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n      dispatch(setAuthenticated(true));\r\n      dispatch(setUser(user));\r\n      // console.log(user);\r\n\r\n      // check if user exist in firestore users\r\n      const docRef = doc(db, \"users\", user.uid);\r\n      const docSnap = await getDoc(docRef);\r\n\r\n      if (!docSnap.exists()) {\r\n        const userData = {\r\n          uid: user.uid,\r\n          email: user.email || \"\",\r\n          displayName: user.displayName || \"\",\r\n          photoURL: user.photoURL || \"\",\r\n          role: \"user\" || \"\",\r\n          createdAt: Timestamp.now(),\r\n          updatedAt: Timestamp.now(),\r\n        };\r\n        await setDoc(doc(db, \"users\", user.uid), userData);\r\n      } else {\r\n        // update existing user\r\n        const userData = {\r\n          displayName: user.displayName || \"\",\r\n          photoURL: user.photoURL || \"\",\r\n          updatedAt: Timestamp.now(),\r\n        };\r\n        await updateDoc(doc(db, \"users\", user.uid), userData);\r\n      }\r\n\r\n      dispatch(setLoading(false));\r\n      setTimeout(() => {\r\n        console.log(\"navigate to chat\");\r\n        navigation(\"/chat\");\r\n      }, 500);\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 d-flex flex-column justify-content-center align-items-center\">\r\n      <p\r\n        className=\"remark\"\r\n        style={{\r\n          fontSize: \"0.8rem\",\r\n        }}\r\n      >\r\n        Make use of firebase authentication. Please enable broswer popup for\r\n        login.\r\n      </p>\r\n      <div>\r\n        <div className=\"text-danger text-center\">Disclaimer</div>\r\n        <div>\r\n          Server will only store the following data returned by firebase:\r\n        </div>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <ul\r\n            className=\"remark mb-1\"\r\n            style={{\r\n              fontSize: \"0.8rem\",\r\n            }}\r\n          >\r\n            <li>firebase auto-generated uid</li>\r\n            <li>your gmail</li>\r\n            <li>your google account display name</li>\r\n            <li>avatar</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"mb-2 text-center\">\r\n          And will not be used for commercial purposes.\r\n        </div>\r\n      </div>\r\n      <button\r\n        onClick={handleLoginGoogle}\r\n        style={{\r\n          backgroundColor: \"rgb(55, 85, 168)\",\r\n          color: \"white\",\r\n        }}\r\n        className=\"btn button-primary google d-flex align-items-center p-2 mb-2\"\r\n      >\r\n        <div className=\"bg-white p-2 me-2\">\r\n          <img\r\n            width={30}\r\n            height={30}\r\n            src={require(\"app/assets/images/google.png\")}\r\n            alt=\"google\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"signIn\">Sign in with Google</div>\r\n      </button>\r\n      {/* <Row className=\"\">\r\n        <Col>\r\n          <Card className=\"shadow overflow-hidden\">\r\n          <div className=\"bg-primary w-100\" style={{height:'2rem'}}></div>\r\n            <CardBody className=\"mx-4 mb-4\">\r\n              \r\n              <Formik\r\n                initialValues={{\r\n                  loginName: \"\",\r\n                  password: \"\",\r\n                }}\r\n                validationSchema={Schema}\r\n                onSubmit={onSubmit}\r\n              >\r\n                {() => (\r\n                  <Form className=\"form-horizontal\">\r\n                    {loginError && typeof loginError === 'string' ? (\r\n                            <Alert color=\"danger\">{loginError}</Alert>\r\n                          ) : null}\r\n                    <div className=\"mb-3\">\r\n                      <InputField\r\n                        name=\"username\"\r\n                        label=\"username\"\r\n                        placeholder=\"username\"\r\n                        type=\"text\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                      <InputField\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        placeholder=\"password\"\r\n                        type=\"password\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"mt-3 d-grid\">\r\n                      <button\r\n                        className=\"btn btn-primary btn-block\"\r\n                        type=\"submit\"\r\n                        // disabled={loginLoading}\r\n                      >\r\n                        Login\r\n                        {loginLoading ? (\r\n                                <i className=\"bx bx-loader-circle bx-spin\" />\r\n                              ) : (\r\n                                '登入'\r\n                              )}\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"mt-4 text-center\"></div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row> */}\r\n\r\n      <Link to=\"/\">go back to home</Link>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["LoginPage","Yup","shape","username","required","password","dispatch","useDispatch","navigation","useNavigate","useSelector","rootState","auth","user","isAuthenticated","useEffect","setActiveRoute","handleLoginGoogle","setLoading","provider","GoogleAuthProvider","getAuth","signInWithPopup","result","setAuthenticated","setUser","docRef","doc","db","uid","getDoc","exists","userData","email","displayName","photoURL","role","createdAt","Timestamp","updatedAt","setDoc","updateDoc","setTimeout","console","log","className","style","fontSize","onClick","backgroundColor","color","width","height","src","require","alt","to"],"sourceRoot":""}
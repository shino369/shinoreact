{"version":3,"file":"static/js/521.15372305.chunk.js","mappings":"yTAiCaA,GALEC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAAaG,SAAS,YAChCC,SAAUJ,EAAAA,KAAaG,SAAS,cAGT,WACvB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,MACnB,GAAkCC,EAAAA,EAAAA,KAChC,SAACC,GAAD,OAA0BA,EAAUC,QADtC,EAAQC,KAAR,EAAcC,iBAIdC,EAAAA,EAAAA,YAAU,WACRT,GAASU,EAAAA,EAAAA,IAAe,YACvB,CAACV,IAEJ,IAAMW,EAAiB,yCAAG,0GACxBX,GAASY,EAAAA,EAAAA,KAAW,IACdC,EAAW,IAAIC,EAAAA,GACfR,GAAOS,EAAAA,EAAAA,MAHW,mBAMDC,EAAAA,EAAAA,IAAgBV,EAAMO,GANrB,cAMhBI,EANgB,OAOhBV,EAAOU,EAAOV,KACpBP,GAASkB,EAAAA,EAAAA,KAAiB,IAC1BlB,GAASmB,EAAAA,EAAAA,IAAQZ,IAIXa,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASf,EAAKgB,KAbf,WAcAC,EAAAA,EAAAA,IAAOJ,GAdP,kBAgBTK,SAhBS,wBAiBdC,EAAW,CACfH,IAAKhB,EAAKgB,IACVI,MAAOpB,EAAKoB,MACZC,YAAarB,EAAKqB,YAClBC,SAAUtB,EAAKsB,SACfC,KAAM,OACNC,UAAWC,EAAAA,GAAAA,MACXC,UAAWD,EAAAA,GAAAA,OAxBO,WA0BdE,EAAAA,EAAAA,KAAOb,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASf,EAAKgB,KAAMG,GA1BrB,QA6BtB1B,GAASY,EAAAA,EAAAA,KAAW,IACpBV,EAAW,SA9BW,kDAgCtBiC,QAAQC,IAAR,MACApC,GAASY,EAAAA,EAAAA,KAAW,IAjCE,0DAAH,qDAqCvB,OACE,iBAAKyB,UAAU,mEAAf,WACE,cACEA,UAAU,SACVC,MAAO,CACLC,SAAU,UAHd,wFASA,oBACEC,QAAS7B,EACT2B,MAAO,CACLG,gBAAiB,mBACjBC,MAAO,SAETL,UAAU,+DANZ,WAQE,gBAAKA,UAAU,oBAAf,UACE,gBACEM,MAAO,GACPC,OAAQ,GACRC,IAAKC,EAAQ,OACbC,IAAI,cAIR,gBAAKV,UAAU,SAAf,qCA4DF,SAAC,KAAD,CAAMW,GAAG,IAAT,mC","sources":["app/pages/login/index.tsx"],"sourcesContent":["// import { useCallback, useEffect, useState } from 'react';\n\nimport { Form, Formik } from \"formik\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { setActiveRoute } from \"store/activeRoute\";\nimport { Alert, Card, CardBody, Col, Container, Row } from \"reactstrap\";\nimport { InputField } from \"app/components\";\nimport * as Yup from \"yup\";\nimport { setAuthenticated, setUser } from \"store/auth\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { RootState } from \"store\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport \"./index.scss\";\nimport { setLoading } from \"store/loading\";\nimport {\n  collection,\n  addDoc,\n  getDoc,\n  setDoc,\n  doc,\n  query,\n  where,\n  Timestamp,\n} from \"firebase/firestore\";\nimport { db } from \"app/hooks/firebase\";\n\nconst Schema = Yup.object().shape({\n  username: Yup.string().required(\"required\"),\n  password: Yup.string().required(\"required\"),\n});\n\nexport const LoginPage = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigate();\n  const { user, isAuthenticated } = useSelector(\n    (rootState: RootState) => rootState.auth\n  );\n\n  useEffect(() => {\n    dispatch(setActiveRoute(\"login\"));\n  }, [dispatch]);\n\n  const handleLoginGoogle = async () => {\n    dispatch(setLoading(true));\n    const provider = new GoogleAuthProvider();\n    const auth = getAuth();\n    try {\n      \n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n      dispatch(setAuthenticated(true));\n      dispatch(setUser(user));\n      // console.log(user);\n\n      // check if user exist in firestore users\n      const docRef = doc(db, \"users\", user.uid);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        const userData = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName,\n          photoURL: user.photoURL,\n          role: \"user\",\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now(),\n        };\n        await setDoc(doc(db, \"users\", user.uid), userData);\n      }\n\n      dispatch(setLoading(false));\n      navigation(\"/chat\");\n    } catch (error) {\n      console.log(error);\n      dispatch(setLoading(false));\n    }\n  };\n\n  return (\n    <div className=\"p-4 d-flex flex-column justify-content-center align-items-center\">\n      <p\n        className=\"remark\"\n        style={{\n          fontSize: \"0.8rem\",\n        }}\n      >\n        Make use of firebase authentication\n        Please enable broswer popup for login\n      </p>\n      <button\n        onClick={handleLoginGoogle}\n        style={{\n          backgroundColor: \"rgb(55, 85, 168)\",\n          color: \"white\",\n        }}\n        className=\"btn button-primary google d-flex align-items-center p-2 mb-2\"\n      >\n        <div className=\"bg-white p-2 me-2\">\n          <img\n            width={30}\n            height={30}\n            src={require(\"app/assets/images/google.png\")}\n            alt=\"google\"\n          />\n        </div>\n\n        <div className=\"signIn\">Sign in with Google</div>\n      </button>\n      {/* <Row className=\"\">\n        <Col>\n          <Card className=\"shadow overflow-hidden\">\n          <div className=\"bg-primary w-100\" style={{height:'2rem'}}></div>\n            <CardBody className=\"mx-4 mb-4\">\n              \n              <Formik\n                initialValues={{\n                  loginName: \"\",\n                  password: \"\",\n                }}\n                validationSchema={Schema}\n                onSubmit={onSubmit}\n              >\n                {() => (\n                  <Form className=\"form-horizontal\">\n                    {loginError && typeof loginError === 'string' ? (\n                            <Alert color=\"danger\">{loginError}</Alert>\n                          ) : null}\n                    <div className=\"mb-3\">\n                      <InputField\n                        name=\"username\"\n                        label=\"username\"\n                        placeholder=\"username\"\n                        type=\"text\"\n                      />\n                    </div>\n                    <div className=\"mb-3\">\n                      <InputField\n                        name=\"password\"\n                        label=\"password\"\n                        placeholder=\"password\"\n                        type=\"password\"\n                      />\n                    </div>\n                    <div className=\"mt-3 d-grid\">\n                      <button\n                        className=\"btn btn-primary btn-block\"\n                        type=\"submit\"\n                        // disabled={loginLoading}\n                      >\n                        Login\n                        {loginLoading ? (\n                                <i className=\"bx bx-loader-circle bx-spin\" />\n                              ) : (\n                                '登入'\n                              )}\n                      </button>\n                    </div>\n                    <div className=\"mt-4 text-center\"></div>\n                  </Form>\n                )}\n              </Formik>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row> */}\n\n      <Link to=\"/\">go back to home</Link>\n    </div>\n  );\n};\n"],"names":["LoginPage","Yup","shape","username","required","password","dispatch","useDispatch","navigation","useNavigate","useSelector","rootState","auth","user","isAuthenticated","useEffect","setActiveRoute","handleLoginGoogle","setLoading","provider","GoogleAuthProvider","getAuth","signInWithPopup","result","setAuthenticated","setUser","docRef","doc","db","uid","getDoc","exists","userData","email","displayName","photoURL","role","createdAt","Timestamp","updatedAt","setDoc","console","log","className","style","fontSize","onClick","backgroundColor","color","width","height","src","require","alt","to"],"sourceRoot":""}
{"version":3,"file":"static/js/316.4b20b67c.chunk.js","mappings":"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","sources":["app/pages/chat/index.tsx"],"sourcesContent":["// import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { setActiveRoute } from \"store/activeRoute\";\r\nimport {\r\n  addDoc,\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  limit,\r\n  onSnapshot,\r\n  orderBy,\r\n  query,\r\n  Timestamp,\r\n  where,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"app/hooks/firebase\";\r\nimport { RootState } from \"store\";\r\nimport moment from \"moment\";\r\nimport { Input, Table } from \"reactstrap\";\r\nimport { useFirestoreQuery } from \"app/hooks/commonHook\";\r\nimport \"./index.scss\";\r\nimport { ChatItem, Icon, InputField } from \"app/components\";\r\nimport { Form, Formik, FormikHelpers } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport _ from \"lodash\";\r\n\r\nconst Schema = Yup.object().shape({\r\n  msg: Yup.string().required(\"required\"),\r\n});\r\n\r\ntype FormItem = {\r\n  msg: string;\r\n};\r\n\r\nexport const ChatPage = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((rootState: RootState) => rootState.auth);\r\n  const [newMessage, setNewMessage] = useState<any[]>([]);\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveRoute(\"chat\"));\r\n  }, [dispatch]);\r\n  const _q = query(\r\n    collection(db, \"messages\"),\r\n    orderBy(\"createdAt\"),\r\n    limit(100)\r\n  );\r\n  const messages = useFirestoreQuery(_q);\r\n  const scrollRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\r\n  }, [messages]);\r\n\r\n  // debounce scroll\r\n\r\n  const handleScroll = _.debounce((e) => {\r\n    const scrollTop = e.target.scrollTop;\r\n    const scrollHeight = e.target.scrollHeight;\r\n    const clientHeight = e.target.clientHeight;\r\n    // console.log(scrollTop + clientHeight, scrollHeight);\r\n    if (scrollTop + clientHeight + 200 < scrollHeight) {\r\n      setVisible(true);\r\n    } else {\r\n      setVisible(false);\r\n    }\r\n  }, 100);\r\n\r\n  // const handleScroll = (e: any) => {\r\n  //   const scrollTop = e.target.scrollTop;\r\n  //   const scrollHeight = e.target.scrollHeight;\r\n  //   const clientHeight = e.target.clientHeight;\r\n  //   console.log(scrollTop + clientHeight, scrollHeight);\r\n  //   if (scrollTop + clientHeight + 200 < scrollHeight) {\r\n  //     setVisible(true);\r\n  //   }else{\r\n  //     setVisible(false);\r\n  //   }\r\n  // };\r\n\r\n  // useEffect(() => {\r\n\r\n  //   const _q = query(collection(db, \"messages\"), orderBy(\"createdAt\"), limit(100));\r\n  //   const unsubscribe = onSnapshot(_q, (snapshot) => {\r\n  //     const data = snapshot.docs.map(\r\n  //       (doc) => ({\r\n  //         ...doc.data(),\r\n  //         id: doc.id,\r\n  //       })\r\n  //     )\r\n  //     // snapshot.docChanges().forEach((change) => {\r\n  //     //   if (change.type === \"added\") {\r\n  //     //     console.log(\"New: \", change.doc.data());\r\n  //     //   }\r\n  //     //   if (change.type === \"modified\") {\r\n  //     //     console.log(\"Modified: \", change.doc.data());\r\n  //     //   }\r\n  //     //   if (change.type === \"removed\") {\r\n  //     //     console.log(\"Removed: \", change.doc.data());\r\n  //     //   }\r\n  //     //   const msg = change.doc.data();\r\n  //     //   setMessages((prev) => [...prev, msg]);\r\n  //     // });\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     unsubscribe();\r\n  //   };\r\n  // }, []);\r\n\r\n  const onSubmit = async (\r\n    values: FormItem,\r\n    actions: FormikHelpers<FormItem>\r\n  ) => {\r\n    const { msg } = values;\r\n    const trimmed = msg.trim();\r\n    if (trimmed.length > 0) {\r\n      const _q = collection(db, \"messages\");\r\n\r\n      const message = {\r\n        uid: user!.uid,\r\n        displayName: user!.displayName,\r\n        photoURL: user!.photoURL,\r\n        message: trimmed,\r\n        createdAt: Timestamp.now(),\r\n      };\r\n      const docRef = await addDoc(collection(db, \"messages\"), message);\r\n    }\r\n    actions.resetForm();\r\n    // console.log(\"values\", values);\r\n    // submit to firebase\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center chatroom-wrapper px-sm-4 pt-sm-3 pb-sm-5\">\r\n      <div className=\"chatroom overflow-hidden shadow d-flex flex-column position-relative\">\r\n        <div className=\"room-title border-bottom text-center py-3 shadow\">\r\n          Realtime Chat Room\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            scrollRef.current.scrollTo({\r\n              top: scrollRef.current.scrollHeight,\r\n              behavior: \"smooth\",\r\n            });\r\n          }}\r\n          style={{\r\n            borderRadius: '50%',\r\n            opacity: visible ? 1 : 0,\r\n            transform: visible ? \"translateY(0)\" : \"translateX(100%)\",\r\n          }}\r\n          className=\"position-absolute scroll-to pointer transition mb-5 mb-sm-0 shadow\"\r\n        >\r\n          <Icon svg name=\"arrow-down\" size={30} color={\"white\"} />\r\n        </div>\r\n        <div\r\n          ref={scrollRef}\r\n          onScroll={handleScroll}\r\n          className=\"room-content hideScroll\"\r\n        >\r\n          {messages.map((item, index) => (\r\n            <ChatItem\r\n              key={index}\r\n              name={item.displayName}\r\n              message={item.message}\r\n              self={user?.uid === item?.uid}\r\n              avatar={item.photoURL}\r\n              uid={item.uid}\r\n              createdAt={item.createdAt}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"border-top pt-3 pb-5 pb-sm-3\">\r\n          <Formik\r\n            initialValues={{\r\n              msg: \"\",\r\n            }}\r\n            validationSchema={Schema}\r\n            onSubmit={onSubmit}\r\n          >\r\n            {({values}) => (\r\n              <Form className=\"d-flex w-100 px-4\">\r\n                <div className=\"col\">\r\n                  <InputField\r\n                    style={{\r\n                      backgroundColor: \"rgba(54, 57, 63, 0.8)\",\r\n                      border: \"none\",\r\n                      caretColor: \"white\",\r\n                      color: \"white\",\r\n                      resize: \"none\",\r\n                    }}\r\n                    name=\"msg\"\r\n                    placeholder=\"Input something...\"\r\n                    type=\"textarea\"\r\n                    showError={false}\r\n                    rows={values.msg?.split('\\n').length}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"d-flex align-items-center\">\r\n                  <button\r\n                    className=\"btn btn-primary btn-block\"\r\n                    type=\"submit\"\r\n                    // disabled={loginLoading}\r\n                  >\r\n                    SEND\r\n                  </button>\r\n                </div>\r\n                <div className=\"mt-4 text-center\"></div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["Schema","Yup","shape","msg","required","ChatPage","dispatch","useDispatch","user","useSelector","rootState","auth","useState","visible","setVisible","useEffect","setActiveRoute","_q","query","collection","db","orderBy","limit","messages","useFirestoreQuery","scrollRef","useRef","current","scrollTo","scrollHeight","handleScroll","_","e","scrollTop","target","clientHeight","onSubmit","values","actions","trimmed","trim","length","message","uid","displayName","photoURL","createdAt","Timestamp","addDoc","resetForm","className","onClick","top","behavior","style","borderRadius","opacity","transform","svg","name","size","color","ref","onScroll","map","item","index","self","avatar","initialValues","validationSchema","backgroundColor","border","caretColor","resize","placeholder","type","showError","rows","split"],"sourceRoot":""}
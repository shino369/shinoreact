{"version":3,"file":"static/js/841.88fd1277.chunk.js","mappings":"+KAiBO,SAASA,IACdC,EAAAA,WAAgB,WAEdC,EAAAA,GAAAA,eAAoBC,EAAAA,GAkDpB,OAlBAD,EAAAA,GAAAA,MAAAA,QAAmB,cAAcE,SAAQ,SAACC,IAJ7B,SAACA,GACZH,EAAAA,GAAAA,IAASG,EAAM,CAAEC,UAAW,IAI5BC,CAAKF,GAELF,EAAAA,EAAAA,OAAqB,CACnBK,MAAM,EACNC,QAASJ,EACTK,QAAS,YArCO,SAACL,EAAWM,GAC9B,IACIC,EAAI,EACNC,EAAgB,KAFAF,GAAc,GAG5BN,EAAKS,UAAUC,SAAS,uBAC1BH,GAAK,IACLC,EAAI,GACKR,EAAKS,UAAUC,SAAS,yBACjCH,EAAI,IACJC,EAAI,GAENR,EAAKW,MAAMC,UAAY,aAAeL,EAAI,OAASC,EAAI,MACvDR,EAAKW,MAAME,QAAU,IACrBhB,EAAAA,GAAAA,OACEG,EACA,CAAEO,EAAGA,EAAGC,EAAGA,EAAGP,UAAW,GACzB,CACEa,SAAU,KACVP,EAAG,EACHC,EAAG,EACHP,UAAW,EACXc,KAAM,OACNC,UAAW,SAgBXC,CAAYjB,SAWX,kBAAMH,EAAAA,GAAAA,aAAkB,iBAC9B,M,kIChEQqB,EAAW,YACtBvB,EAAAA,EAAAA,KACA,IAAMwB,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,IAAe,WACxB,CAACH,IA0BH,OACE,iBAAKI,UAAU,MAAf,WACE,gBAAKA,UAAU,gDAAf,UACE,2CAEF,iBAAKA,UAAU,+BAAf,WACE,8EACA,4DAEE,iBAAMA,UAAU,kBAAhB,0BAFF,QAIA,cACEA,UAAU,SACVZ,MAAO,CACLa,SAAU,UAHd,SAOI,0FAGJ,cAAGD,UAAU,YAAb,kGAMF,mBACA,SAAC,KAAD,CAAeA,UAAU,eAAeE,SAAS,aAAjD,SApDM,2JAwDN,gBAAKF,UAAU,kDAAf,UACE,gBACEG,MAAO,OACPC,OAAQ,OACRhB,MAAO,CACLiB,SAAU,SAEZC,IAAI,sDACJC,IAAI","sources":["app/hooks/custom.tsx","app/pages/home/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Observable } from \"rxjs\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollTrigger } from \"gsap/all\";\r\n\r\nexport function useObservable<T>(observable$: Observable<T>, initialValue: T) {\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  React.useEffect(() => {\r\n    const subscription = observable$.subscribe((v) => setValue(v));\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [observable$]);\r\n\r\n  return value;\r\n}\r\n\r\nexport function useAnimation() {\r\n  React.useEffect(() => {\r\n\r\n    gsap.registerPlugin(ScrollTrigger);\r\n    const animateFrom = (elem: any, _direction?: number) => {\r\n      const direction = _direction || 1;\r\n      var x = 0,\r\n        y = direction * 1000;\r\n      if (elem.classList.contains(\"gs_reveal_fromLeft\")) {\r\n        x = -100;\r\n        y = 0;\r\n      } else if (elem.classList.contains(\"gs_reveal_fromRight\")) {\r\n        x = 100;\r\n        y = 0;\r\n      }\r\n      elem.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\r\n      elem.style.opacity = \"0\";\r\n      gsap.fromTo(\r\n        elem,\r\n        { x: x, y: y, autoAlpha: 0 },\r\n        {\r\n          duration: 1.25,\r\n          x: 0,\r\n          y: 0,\r\n          autoAlpha: 1,\r\n          ease: \"expo\",\r\n          overwrite: \"auto\",\r\n        }\r\n      );\r\n    };\r\n\r\n    const hide = (elem: any) => {\r\n      gsap.set(elem, { autoAlpha: 0 });\r\n    };\r\n\r\n    gsap.utils.toArray(\".gs_reveal\").forEach((elem: any) => {\r\n      hide(elem); // assure that the element is hidden when scrolled into view\r\n\r\n      ScrollTrigger.create({\r\n        once: true,\r\n        trigger: elem,\r\n        onEnter: () => {\r\n          animateFrom(elem);\r\n        },\r\n        // onEnterBack: () => {\r\n        //   animateFrom(elem, -1)\r\n        // },\r\n        // onLeave: () => {\r\n        //   hide(elem)\r\n        // }, // assure that the element is hidden when scrolled into view\r\n      });\r\n    });\r\n\r\n    return () => gsap.killTweensOf('.gs_reveal');\r\n  }, []);\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nimport { useAnimation } from \"app/hooks/custom\";\r\nimport { HighlightCode } from \"app/components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setActiveRoute } from \"store/activeRoute\";\r\n\r\nexport const HomePage = () => {\r\n  useAnimation();\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveRoute('home'))\r\n  },[dispatch])\r\n  \r\n  const code = `\r\n  const foo = () => { \r\n    const [bar, setBar] = useState<string>('foo');\r\n    return bar;\r\n\r\n    // the text animation makes use of gsap\r\n  }\r\n  `;\r\n\r\n  // const [maxWidth, setMaxWidth] = React.useState<number>(1000);\r\n  // const ref = React.useRef<any>(null);\r\n  // const handleResize = () => {\r\n  //   setMaxWidth(ref.current.offsetWidth);\r\n  // };\r\n  // React.useEffect(() => {\r\n  //   console.log(\"width\", ref.current ? ref.current.offsetWidth : 0);\r\n\r\n  //   if (ref.current) window.addEventListener(\"resize\", handleResize);\r\n\r\n  //   return () => {\r\n  //     window.removeEventListener(\"resize\", handleResize);\r\n  //   };\r\n  // }, [ref]);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"page-header mb-2 gs_reveal gs_reveal_fromLeft\">\r\n        <strong>Welcome</strong>\r\n      </div>\r\n      <div className=\"gs_reveal gs_reveal_fromLeft\">\r\n        <p>This page is a personal page host in Github Page.</p>\r\n        <p>\r\n          Made with react, simply use for\r\n          <span className=\"ms-1 high-light\">demo purpose</span>.\r\n        </p>\r\n        <p\r\n          className=\"remark\"\r\n          style={{\r\n            fontSize: \"0.8rem\",\r\n          }}\r\n        >\r\n          {\r\n            \"( Perhaps there maybe further development or features in the future. No one knows. )\"\r\n          }\r\n        </p>\r\n        <p className=\"opactiy-5\">\r\n          If you are using mobile device, please click the menu icon to toggle\r\n          nav sidebar\r\n        </p>\r\n      </div>\r\n\r\n      <hr />\r\n      <HighlightCode className=\"code-snippet\" language=\"typescript\">\r\n        {code}\r\n      </HighlightCode>\r\n\r\n      <div className=\"d-flex justify-content-center position-relative\">\r\n        <img\r\n          width={\"100%\"}\r\n          height={\"auto\"}\r\n          style={{\r\n            maxWidth: \"500px\",\r\n          }}\r\n          src=\"https://c.tenor.com/a5MVWtIRNFUAAAAC/genba-neko.gif\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const styles = {\r\n//   header: {\r\n//     fontSize: \"3em\",\r\n//   },\r\n// };\r\n"],"names":["useAnimation","React","gsap","ScrollTrigger","forEach","elem","autoAlpha","hide","once","trigger","onEnter","_direction","x","y","classList","contains","style","transform","opacity","duration","ease","overwrite","animateFrom","HomePage","dispatch","useDispatch","useEffect","setActiveRoute","className","fontSize","language","width","height","maxWidth","src","alt"],"sourceRoot":""}